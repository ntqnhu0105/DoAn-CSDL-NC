// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuanLyBanVeBenXeMienDong.Models.System;

#nullable disable

namespace QuanLyBanVeBenXeMienDong.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250330061041_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.ChuyenXe", b =>
                {
                    b.Property<string>("MaChuyen")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("Gia")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan>("GioKhoiHanh")
                        .HasColumnType("time");

                    b.Property<string>("MaTuyen")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaXe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("NgayKhoiHanh")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MaChuyen");

                    b.HasIndex("MaTuyen");

                    b.HasIndex("MaXe");

                    b.ToTable("ChuyenXes");

                    b.HasData(
                        new
                        {
                            MaChuyen = "CX001",
                            Gia = 250000m,
                            GioKhoiHanh = new TimeSpan(0, 7, 0, 0, 0),
                            MaTuyen = "TX001",
                            MaXe = "XE001",
                            NgayKhoiHanh = new DateTime(2025, 3, 31, 13, 10, 40, 462, DateTimeKind.Local).AddTicks(8976),
                            TrangThai = "Chưa khởi hành"
                        },
                        new
                        {
                            MaChuyen = "CX002",
                            Gia = 100000m,
                            GioKhoiHanh = new TimeSpan(0, 9, 0, 0, 0),
                            MaTuyen = "TX002",
                            MaXe = "XE002",
                            NgayKhoiHanh = new DateTime(2025, 3, 31, 13, 10, 40, 462, DateTimeKind.Local).AddTicks(8998),
                            TrangThai = "Chưa khởi hành"
                        },
                        new
                        {
                            MaChuyen = "CX003",
                            Gia = 120000m,
                            GioKhoiHanh = new TimeSpan(0, 14, 0, 0, 0),
                            MaTuyen = "TX003",
                            MaXe = "XE003",
                            NgayKhoiHanh = new DateTime(2025, 4, 1, 13, 10, 40, 462, DateTimeKind.Local).AddTicks(9001),
                            TrangThai = "Chưa khởi hành"
                        },
                        new
                        {
                            MaChuyen = "CX004",
                            Gia = 300000m,
                            GioKhoiHanh = new TimeSpan(0, 8, 0, 0, 0),
                            MaTuyen = "TX004",
                            MaXe = "XE004",
                            NgayKhoiHanh = new DateTime(2025, 3, 31, 13, 10, 40, 462, DateTimeKind.Local).AddTicks(9003),
                            TrangThai = "Chưa khởi hành"
                        },
                        new
                        {
                            MaChuyen = "CX005",
                            Gia = 280000m,
                            GioKhoiHanh = new TimeSpan(0, 20, 0, 0, 0),
                            MaTuyen = "TX005",
                            MaXe = "XE005",
                            NgayKhoiHanh = new DateTime(2025, 4, 1, 13, 10, 40, 462, DateTimeKind.Local).AddTicks(9006),
                            TrangThai = "Chưa khởi hành"
                        },
                        new
                        {
                            MaChuyen = "CX006",
                            Gia = 150000m,
                            GioKhoiHanh = new TimeSpan(0, 13, 0, 0, 0),
                            MaTuyen = "TX006",
                            MaXe = "XE006",
                            NgayKhoiHanh = new DateTime(2025, 3, 31, 13, 10, 40, 462, DateTimeKind.Local).AddTicks(9008),
                            TrangThai = "Chưa khởi hành"
                        },
                        new
                        {
                            MaChuyen = "CX007",
                            Gia = 100000m,
                            GioKhoiHanh = new TimeSpan(0, 15, 0, 0, 0),
                            MaTuyen = "TX002",
                            MaXe = "XE002",
                            NgayKhoiHanh = new DateTime(2025, 4, 1, 13, 10, 40, 462, DateTimeKind.Local).AddTicks(9010),
                            TrangThai = "Chưa khởi hành"
                        },
                        new
                        {
                            MaChuyen = "CX008",
                            Gia = 250000m,
                            GioKhoiHanh = new TimeSpan(0, 10, 0, 0, 0),
                            MaTuyen = "TX001",
                            MaXe = "XE001",
                            NgayKhoiHanh = new DateTime(2025, 4, 2, 13, 10, 40, 462, DateTimeKind.Local).AddTicks(9012),
                            TrangThai = "Chưa khởi hành"
                        },
                        new
                        {
                            MaChuyen = "CX009",
                            Gia = 300000m,
                            GioKhoiHanh = new TimeSpan(0, 17, 0, 0, 0),
                            MaTuyen = "TX004",
                            MaXe = "XE004",
                            NgayKhoiHanh = new DateTime(2025, 4, 1, 13, 10, 40, 462, DateTimeKind.Local).AddTicks(9014),
                            TrangThai = "Chưa khởi hành"
                        },
                        new
                        {
                            MaChuyen = "CX010",
                            Gia = 280000m,
                            GioKhoiHanh = new TimeSpan(0, 5, 0, 0, 0),
                            MaTuyen = "TX007",
                            MaXe = "XE007",
                            NgayKhoiHanh = new DateTime(2025, 3, 31, 13, 10, 40, 462, DateTimeKind.Local).AddTicks(9016),
                            TrangThai = "Chưa khởi hành"
                        },
                        new
                        {
                            MaChuyen = "CX011",
                            Gia = 150000m,
                            GioKhoiHanh = new TimeSpan(0, 14, 0, 0, 0),
                            MaTuyen = "TX008",
                            MaXe = "XE008",
                            NgayKhoiHanh = new DateTime(2025, 4, 1, 13, 10, 40, 462, DateTimeKind.Local).AddTicks(9018),
                            TrangThai = "Chưa khởi hành"
                        },
                        new
                        {
                            MaChuyen = "CX012",
                            Gia = 130000m,
                            GioKhoiHanh = new TimeSpan(0, 8, 0, 0, 0),
                            MaTuyen = "TX009",
                            MaXe = "XE009",
                            NgayKhoiHanh = new DateTime(2025, 4, 2, 13, 10, 40, 462, DateTimeKind.Local).AddTicks(9020),
                            TrangThai = "Chưa khởi hành"
                        });
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.ChuyenXe_Diem", b =>
                {
                    b.Property<string>("MaChuyen")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaDiem")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<TimeSpan>("ThoiGianDuKien")
                        .HasColumnType("time");

                    b.HasKey("MaChuyen", "MaDiem");

                    b.HasIndex("MaDiem");

                    b.ToTable("ChuyenXe_Diems");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.Diem", b =>
                {
                    b.Property<string>("MaDiem")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LoaiDiem")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MaTuyen")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TenDiem")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToaDoGPS")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MaDiem");

                    b.HasIndex("MaTuyen");

                    b.ToTable("Diems");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.HoanTien", b =>
                {
                    b.Property<string>("MaHoanTien")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LyDo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MaKh")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaVeXe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("NgayYeuCau")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SoTienHoan")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MaHoanTien");

                    b.HasIndex("MaKh");

                    b.HasIndex("MaVeXe");

                    b.ToTable("HoanTiens");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.KhachHang", b =>
                {
                    b.Property<string>("MaKh")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CCCD")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HovaTen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SDT")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("MaKh");

                    b.ToTable("KhachHangs");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.KhuyenMai", b =>
                {
                    b.Property<string>("MaKhuyenMai")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MoTa")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("MucGiamGia")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("NgayBatDau")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayKetThuc")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenKhuyenMai")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MaKhuyenMai");

                    b.ToTable("KhuyenMais");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.LoaiXe", b =>
                {
                    b.Property<string>("MaLoai")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MoTa")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SoLuongGhe")
                        .HasColumnType("int");

                    b.Property<string>("TenLoai")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MaLoai");

                    b.ToTable("LoaiXes");

                    b.HasData(
                        new
                        {
                            MaLoai = "LX001",
                            MoTa = "Xe cao cấp, có điều hòa",
                            SoLuongGhe = 40,
                            TenLoai = "Xe giường nằm"
                        },
                        new
                        {
                            MaLoai = "LX002",
                            MoTa = "Xe phổ thông",
                            SoLuongGhe = 45,
                            TenLoai = "Xe ghế ngồi"
                        },
                        new
                        {
                            MaLoai = "LX003",
                            MoTa = "Xe sang trọng, ít ghế",
                            SoLuongGhe = 20,
                            TenLoai = "Xe limousine"
                        },
                        new
                        {
                            MaLoai = "LX004",
                            MoTa = "Xe cao cấp, ghế rộng",
                            SoLuongGhe = 30,
                            TenLoai = "Xe VIP"
                        });
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.NhaXe", b =>
                {
                    b.Property<string>("MaNhaXe")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SDT")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("TenNhaXe")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MaNhaXe");

                    b.ToTable("NhaXes");

                    b.HasData(
                        new
                        {
                            MaNhaXe = "NX001",
                            DiaChi = "292 Đinh Bộ Lĩnh, TP.HCM",
                            Email = "mien_dong@gmail.com",
                            SDT = "0901234567",
                            TenNhaXe = "Nhà xe Miền Đông"
                        },
                        new
                        {
                            MaNhaXe = "NX002",
                            DiaChi = "80 Trần Hưng Đạo, TP.HCM",
                            Email = "phuongtrang@gmail.com",
                            SDT = "0909876543",
                            TenNhaXe = "Nhà xe Phương Trang"
                        },
                        new
                        {
                            MaNhaXe = "NX003",
                            DiaChi = "266 Lê Hồng Phong, TP.HCM",
                            Email = "thanhbuoi@gmail.com",
                            SDT = "0912345678",
                            TenNhaXe = "Nhà xe Thành Bưởi"
                        },
                        new
                        {
                            MaNhaXe = "NX004",
                            DiaChi = "5 Phạm Ngũ Lão, Hà Nội",
                            Email = "hoanglong@gmail.com",
                            SDT = "0987654321",
                            TenNhaXe = "Nhà xe Hoàng Long"
                        },
                        new
                        {
                            MaNhaXe = "NX005",
                            DiaChi = "102 Nguyễn Văn Trỗi, TP.HCM",
                            Email = "mailinh@gmail.com",
                            SDT = "0918889999",
                            TenNhaXe = "Nhà xe Mai Linh"
                        },
                        new
                        {
                            MaNhaXe = "NX006",
                            DiaChi = "50 Lê Văn Lương, TP.HCM",
                            Email = "futa@gmail.com",
                            SDT = "0923456789",
                            TenNhaXe = "Nhà xe Futa Bus Lines"
                        },
                        new
                        {
                            MaNhaXe = "NX007",
                            DiaChi = "12 Võ Thị Sáu, TP.HCM",
                            Email = "thanhcong@gmail.com",
                            SDT = "0904455667",
                            TenNhaXe = "Nhà xe Thành Công"
                        },
                        new
                        {
                            MaNhaXe = "NX008",
                            DiaChi = "22 Nguyễn Huệ, TP.HCM",
                            Email = "binhminh@gmail.com",
                            SDT = "0966668888",
                            TenNhaXe = "Nhà xe Bình Minh"
                        });
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.NhanVien", b =>
                {
                    b.Property<string>("MANV")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CCCD")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("ChucVu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DiaChi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HovaTen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MaNhaXe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<string>("SDT")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("MANV");

                    b.HasIndex("MaNhaXe");

                    b.ToTable("NhanViens");

                    b.HasData(
                        new
                        {
                            MANV = "NV000",
                            CCCD = "056304007372",
                            ChucVu = "Nhân viên",
                            Email = "thuy@gmail.com",
                            HovaTen = "Nguyễn Thanh Thúy",
                            MaNhaXe = "NX001",
                            SDT = "0123456789"
                        });
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.PhanCong", b =>
                {
                    b.Property<string>("MaPhanCong")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("GhiChu")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MaChuyen")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaTaiXe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("NgayPhanCong")
                        .HasColumnType("datetime2");

                    b.HasKey("MaPhanCong");

                    b.HasIndex("MaChuyen");

                    b.HasIndex("MaTaiXe");

                    b.ToTable("PhanCongs");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.PhanHoi", b =>
                {
                    b.Property<string>("MaPhanHoi")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaChuyen")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaKh")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaNhaXe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("NgayPhanHoi")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoiDung")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TrangThai")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MaPhanHoi");

                    b.HasIndex("MaChuyen");

                    b.HasIndex("MaKh");

                    b.HasIndex("MaNhaXe");

                    b.ToTable("PhanHois");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.QuayBanVe", b =>
                {
                    b.Property<string>("MaQuay")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MANV")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaNhaXe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TenQuay")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ViTri")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MaQuay");

                    b.HasIndex("MANV");

                    b.HasIndex("MaNhaXe");

                    b.ToTable("QuayBanVes");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.SoGheSoGiuong", b =>
                {
                    b.Property<string>("MaSoGhe")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaXe")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaChuyen")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("MaSoGhe", "MaXe", "MaChuyen");

                    b.HasIndex("MaChuyen");

                    b.HasIndex("MaXe");

                    b.ToTable("SoGheSoGiuongs");

                    b.HasData(
                        new
                        {
                            MaSoGhe = "A01",
                            MaXe = "XE001",
                            MaChuyen = "CX001",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "A02",
                            MaXe = "XE001",
                            MaChuyen = "CX001",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "A03",
                            MaXe = "XE001",
                            MaChuyen = "CX001",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "B01",
                            MaXe = "XE002",
                            MaChuyen = "CX002",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "B02",
                            MaXe = "XE002",
                            MaChuyen = "CX002",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "B03",
                            MaXe = "XE002",
                            MaChuyen = "CX002",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "C01",
                            MaXe = "XE003",
                            MaChuyen = "CX003",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "C02",
                            MaXe = "XE003",
                            MaChuyen = "CX003",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "D01",
                            MaXe = "XE004",
                            MaChuyen = "CX004",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "D02",
                            MaXe = "XE004",
                            MaChuyen = "CX004",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "E01",
                            MaXe = "XE005",
                            MaChuyen = "CX005",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "E02",
                            MaXe = "XE005",
                            MaChuyen = "CX005",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "F01",
                            MaXe = "XE006",
                            MaChuyen = "CX006",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "F02",
                            MaXe = "XE006",
                            MaChuyen = "CX006",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "B04",
                            MaXe = "XE002",
                            MaChuyen = "CX007",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "A04",
                            MaXe = "XE001",
                            MaChuyen = "CX008",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "D03",
                            MaXe = "XE004",
                            MaChuyen = "CX009",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "G01",
                            MaXe = "XE007",
                            MaChuyen = "CX010",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "G02",
                            MaXe = "XE007",
                            MaChuyen = "CX010",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "H01",
                            MaXe = "XE008",
                            MaChuyen = "CX011",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "H02",
                            MaXe = "XE008",
                            MaChuyen = "CX011",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "I01",
                            MaXe = "XE009",
                            MaChuyen = "CX012",
                            TrangThai = "Trống"
                        },
                        new
                        {
                            MaSoGhe = "I02",
                            MaXe = "XE009",
                            MaChuyen = "CX012",
                            TrangThai = "Trống"
                        });
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.TaiXe", b =>
                {
                    b.Property<string>("MaTaiXe")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BangLai")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("CCCD")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("DiaChi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HovaTen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("KinhNghiem")
                        .HasColumnType("int");

                    b.Property<DateTime>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<string>("SDT")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("MaTaiXe");

                    b.ToTable("TaiXes");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.ThanhToan", b =>
                {
                    b.Property<string>("MaGiaoDich")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaKh")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaNhaXe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaVeXe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("NgayThanhToan")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhuongThucThanhToan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("SoTien")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MaGiaoDich");

                    b.HasIndex("MaKh");

                    b.HasIndex("MaNhaXe");

                    b.HasIndex("MaVeXe");

                    b.ToTable("ThanhToans");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.TuyenXe", b =>
                {
                    b.Property<string>("MaTuyen")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DiemDen")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DiemDi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("GiaThamKhao")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("KhoangCach")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MoTa")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<TimeSpan>("ThoiGianDuKien")
                        .HasColumnType("time");

                    b.HasKey("MaTuyen");

                    b.ToTable("TuyenXes");

                    b.HasData(
                        new
                        {
                            MaTuyen = "TX001",
                            DiemDen = "Đà Lạt",
                            DiemDi = "TP. Hồ Chí Minh",
                            GiaThamKhao = 250000m,
                            KhoangCach = 300m,
                            MoTa = "Tuyến đường cao tốc, có cảnh đẹp",
                            ThoiGianDuKien = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            MaTuyen = "TX002",
                            DiemDen = "Hải Phòng",
                            DiemDi = "Hà Nội",
                            GiaThamKhao = 100000m,
                            KhoangCach = 120m,
                            MoTa = "Tuyến ngắn, thuận tiện",
                            ThoiGianDuKien = new TimeSpan(0, 2, 0, 0, 0)
                        },
                        new
                        {
                            MaTuyen = "TX003",
                            DiemDen = "Huế",
                            DiemDi = "Đà Nẵng",
                            GiaThamKhao = 120000m,
                            KhoangCach = 100m,
                            MoTa = "Tuyến ven biển, phong cảnh đẹp",
                            ThoiGianDuKien = new TimeSpan(0, 2, 30, 0, 0)
                        },
                        new
                        {
                            MaTuyen = "TX004",
                            DiemDen = "Nha Trang",
                            DiemDi = "TP. Hồ Chí Minh",
                            GiaThamKhao = 300000m,
                            KhoangCach = 450m,
                            MoTa = "Tuyến dài, có nghỉ trạm",
                            ThoiGianDuKien = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            MaTuyen = "TX005",
                            DiemDen = "Sa Pa",
                            DiemDi = "Hà Nội",
                            GiaThamKhao = 280000m,
                            KhoangCach = 320m,
                            MoTa = "Tuyến miền núi, cảnh đẹp",
                            ThoiGianDuKien = new TimeSpan(0, 6, 30, 0, 0)
                        },
                        new
                        {
                            MaTuyen = "TX006",
                            DiemDen = "TP. Hồ Chí Minh",
                            DiemDi = "Cần Thơ",
                            GiaThamKhao = 150000m,
                            KhoangCach = 170m,
                            MoTa = "Tuyến đồng bằng, nhanh chóng",
                            ThoiGianDuKien = new TimeSpan(0, 3, 30, 0, 0)
                        },
                        new
                        {
                            MaTuyen = "TX007",
                            DiemDen = "Cà Mau",
                            DiemDi = "TP. Hồ Chí Minh",
                            GiaThamKhao = 280000m,
                            KhoangCach = 350m,
                            MoTa = "Tuyến đường về miền Tây",
                            ThoiGianDuKien = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            MaTuyen = "TX008",
                            DiemDen = "Thanh Hóa",
                            DiemDi = "Hà Nội",
                            GiaThamKhao = 150000m,
                            KhoangCach = 160m,
                            MoTa = "Tuyến phía Bắc tiện lợi",
                            ThoiGianDuKien = new TimeSpan(0, 3, 30, 0, 0)
                        },
                        new
                        {
                            MaTuyen = "TX009",
                            DiemDen = "Quảng Ngãi",
                            DiemDi = "Đà Nẵng",
                            GiaThamKhao = 130000m,
                            KhoangCach = 120m,
                            MoTa = "Tuyến miền Trung nhanh chóng",
                            ThoiGianDuKien = new TimeSpan(0, 2, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.VeXe", b =>
                {
                    b.Property<string>("MaVeXe")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MANV")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaChuyen")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaKh")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaKhuyenMai")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaSoGhe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaXe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("NgayDatVe")
                        .HasColumnType("datetime2");

                    b.Property<int>("SoLuongVe")
                        .HasColumnType("int");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MaVeXe");

                    b.HasIndex("MANV");

                    b.HasIndex("MaChuyen");

                    b.HasIndex("MaKh");

                    b.HasIndex("MaKhuyenMai");

                    b.ToTable("VeXes");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.VeXe_SoGhe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MaChuyen")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaSoGhe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaVeXe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaXe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("MaVeXe");

                    b.HasIndex("MaSoGhe", "MaXe", "MaChuyen");

                    b.ToTable("VeXe_SoGhes");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.Xe", b =>
                {
                    b.Property<string>("MaXe")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BienSoXe")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("MaLoai")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaNhaXe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("MaXe");

                    b.HasIndex("MaLoai");

                    b.HasIndex("MaNhaXe");

                    b.ToTable("Xes");

                    b.HasData(
                        new
                        {
                            MaXe = "XE001",
                            BienSoXe = "51B-12345",
                            MaLoai = "LX001",
                            MaNhaXe = "NX001"
                        },
                        new
                        {
                            MaXe = "XE002",
                            BienSoXe = "29A-54321",
                            MaLoai = "LX002",
                            MaNhaXe = "NX002"
                        },
                        new
                        {
                            MaXe = "XE003",
                            BienSoXe = "51B-67890",
                            MaLoai = "LX003",
                            MaNhaXe = "NX003"
                        },
                        new
                        {
                            MaXe = "XE004",
                            BienSoXe = "30A-11111",
                            MaLoai = "LX004",
                            MaNhaXe = "NX004"
                        },
                        new
                        {
                            MaXe = "XE005",
                            BienSoXe = "51B-22222",
                            MaLoai = "LX001",
                            MaNhaXe = "NX001"
                        },
                        new
                        {
                            MaXe = "XE006",
                            BienSoXe = "29A-33333",
                            MaLoai = "LX002",
                            MaNhaXe = "NX002"
                        },
                        new
                        {
                            MaXe = "XE007",
                            BienSoXe = "51B-77777",
                            MaLoai = "LX003",
                            MaNhaXe = "NX005"
                        },
                        new
                        {
                            MaXe = "XE008",
                            BienSoXe = "29A-88888",
                            MaLoai = "LX002",
                            MaNhaXe = "NX006"
                        },
                        new
                        {
                            MaXe = "XE009",
                            BienSoXe = "51B-99999",
                            MaLoai = "LX004",
                            MaNhaXe = "NX007"
                        },
                        new
                        {
                            MaXe = "XE010",
                            BienSoXe = "50B-12345",
                            MaLoai = "LX001",
                            MaNhaXe = "NX008"
                        });
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.System.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CCCD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("HovaTen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MANV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaKh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.System.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.System.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.System.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.System.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.ChuyenXe", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.TuyenXe", "TuyenXe")
                        .WithMany()
                        .HasForeignKey("MaTuyen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.Xe", "Xe")
                        .WithMany()
                        .HasForeignKey("MaXe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TuyenXe");

                    b.Navigation("Xe");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.ChuyenXe_Diem", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.ChuyenXe", "ChuyenXe")
                        .WithMany()
                        .HasForeignKey("MaChuyen")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.Diem", "Diem")
                        .WithMany()
                        .HasForeignKey("MaDiem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChuyenXe");

                    b.Navigation("Diem");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.Diem", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.TuyenXe", "TuyenXe")
                        .WithMany()
                        .HasForeignKey("MaTuyen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TuyenXe");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.HoanTien", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.KhachHang", "KhachHang")
                        .WithMany()
                        .HasForeignKey("MaKh")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.VeXe", "VeXe")
                        .WithMany()
                        .HasForeignKey("MaVeXe")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("KhachHang");

                    b.Navigation("VeXe");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.NhanVien", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.NhaXe", "NhaXe")
                        .WithMany()
                        .HasForeignKey("MaNhaXe")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NhaXe");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.PhanCong", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.ChuyenXe", "ChuyenXe")
                        .WithMany()
                        .HasForeignKey("MaChuyen")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.TaiXe", "TaiXe")
                        .WithMany()
                        .HasForeignKey("MaTaiXe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChuyenXe");

                    b.Navigation("TaiXe");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.PhanHoi", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.ChuyenXe", "ChuyenXe")
                        .WithMany()
                        .HasForeignKey("MaChuyen")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.KhachHang", "KhachHang")
                        .WithMany()
                        .HasForeignKey("MaKh")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.NhaXe", "NhaXe")
                        .WithMany()
                        .HasForeignKey("MaNhaXe")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChuyenXe");

                    b.Navigation("KhachHang");

                    b.Navigation("NhaXe");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.QuayBanVe", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.NhanVien", "NhanVien")
                        .WithMany()
                        .HasForeignKey("MANV")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.NhaXe", "NhaXe")
                        .WithMany()
                        .HasForeignKey("MaNhaXe")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NhaXe");

                    b.Navigation("NhanVien");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.SoGheSoGiuong", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.ChuyenXe", "ChuyenXe")
                        .WithMany()
                        .HasForeignKey("MaChuyen")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.Xe", "Xe")
                        .WithMany()
                        .HasForeignKey("MaXe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChuyenXe");

                    b.Navigation("Xe");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.ThanhToan", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.KhachHang", "KhachHang")
                        .WithMany()
                        .HasForeignKey("MaKh")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.NhaXe", "NhaXe")
                        .WithMany()
                        .HasForeignKey("MaNhaXe")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.VeXe", "VeXe")
                        .WithMany()
                        .HasForeignKey("MaVeXe")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("KhachHang");

                    b.Navigation("NhaXe");

                    b.Navigation("VeXe");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.VeXe", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.NhanVien", "NhanVien")
                        .WithMany()
                        .HasForeignKey("MANV")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.ChuyenXe", "ChuyenXe")
                        .WithMany()
                        .HasForeignKey("MaChuyen")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.KhachHang", "KhachHang")
                        .WithMany()
                        .HasForeignKey("MaKh")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.KhuyenMai", "KhuyenMai")
                        .WithMany()
                        .HasForeignKey("MaKhuyenMai")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ChuyenXe");

                    b.Navigation("KhachHang");

                    b.Navigation("KhuyenMai");

                    b.Navigation("NhanVien");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.VeXe_SoGhe", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.VeXe", "VeXe")
                        .WithMany("VeXe_SoGhes")
                        .HasForeignKey("MaVeXe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.SoGheSoGiuong", "SoGheSoGiuong")
                        .WithMany()
                        .HasForeignKey("MaSoGhe", "MaXe", "MaChuyen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoGheSoGiuong");

                    b.Navigation("VeXe");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.Xe", b =>
                {
                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.LoaiXe", "LoaiXe")
                        .WithMany()
                        .HasForeignKey("MaLoai")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuanLyBanVeBenXeMienDong.Models.Data.NhaXe", "NhaXe")
                        .WithMany()
                        .HasForeignKey("MaNhaXe")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LoaiXe");

                    b.Navigation("NhaXe");
                });

            modelBuilder.Entity("QuanLyBanVeBenXeMienDong.Models.Data.VeXe", b =>
                {
                    b.Navigation("VeXe_SoGhes");
                });
#pragma warning restore 612, 618
        }
    }
}
